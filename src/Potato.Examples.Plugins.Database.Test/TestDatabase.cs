#region Copyright
// Copyright 2014 Myrcon Pty. Ltd.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion
using System.Linq;
using NUnit.Framework;
using Potato.Core.Connections.Plugins;
using Potato.Core.Database;
using Potato.Core.Shared;
using Potato.Core.Shared.Models;
using Potato.Core.Variables;
using Potato.Database.Shared.Builders.Methods.Data;

namespace Potato.Examples.Plugins.Database.Test {
    [TestFixture]
    public class TestDatabase {

        /// <summary>
        /// Opens a database driver to a SQLite in-memory database
        /// </summary>
        /// <returns>this</returns>
        public static DatabaseController OpenDatabaseDriver() {
            var variables = new VariableController();

            var database = new DatabaseController() {
                Shared = {
                    Variables = variables
                }
            }.Execute() as DatabaseController;
            
            variables.Set(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.VariablesSet
            }, CommonVariableNames.DatabaseDriverName, "SQLite");

            variables.Set(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.VariablesSet
            }, CommonVariableNames.DatabaseMemory, true);
            
            return database;
        }

        /// <summary>
        /// Test for you to debug.
        /// Set a breakpoint within Potato.Examples.Database.SaveOneUser
        /// </summary>
        [Test]
        public void TestSavingSingleRowFromModel() {
            var database = OpenDatabaseDriver();

            // Create a new plugin controller to load up the test plugin
            var plugins = new CorePluginController() {
                BubbleObjects = {
                    database
                }
            };

            plugins.Execute();

            // Enabling the plugin should then load up the migrations and execute them.
            // See Potato.Examples.Database.GenericEvent
            plugins.Tunnel(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.PluginsEnable,
                Scope = {
                    PluginGuid = plugins.LoadedPlugins.First().PluginGuid
                }
            });

            var result = plugins.Tunnel(new Command() {
                Name = "SaveOneUser",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Potato itself.
                Origin = CommandOrigin.Local,
                Scope = {
                    PluginGuid = plugins.LoadedPlugins.First().PluginGuid
                }
            });

            // Test the command was successful
            Assert.AreEqual(true, result.Success);
            Assert.AreEqual(CommandResultType.Success, result.CommandResultType);

            // Test that data was inserted.
            result = database.Tunnel(
                CommandBuilder.DatabaseQuery(
                new Find()
                .Collection("Potato_Example_Database_Users")
                .Limit(1)
                ).SetOrigin(CommandOrigin.Local)
            );

            Assert.AreEqual(true, result.Success);
            Assert.AreEqual(CommandResultType.Success, result.CommandResultType);

            // UserModel is found in Potato.Examples.Database.UserModel. We reuse it here in the test to keep everything consistent.
            var model = UserModel.FirstFromQuery(result.Now.Queries.FirstOrDefault());

            Assert.AreEqual("Phogue", model.Name);
        }


        /// <summary>
        /// Test for you to debug.
        /// Set a breakpoint within Potato.Examples.Database.SaveOneUser
        /// Set a breakpoint within Potato.Examples.Database.FindOneUser
        /// </summary>
        [Test]
        public void TestSavingAndFindingSingleRowFromModel() {
            var database = OpenDatabaseDriver();

            // Create a new plugin controller to load up the test plugin
            var plugins = new CorePluginController() {
                BubbleObjects = {
                    database
                }
            };

            plugins.Execute();

            // Enabling the plugin should then load up the migrations and execute them.
            // See Potato.Examples.Database.GenericEvent
            plugins.Tunnel(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.PluginsEnable,
                Scope = {
                    PluginGuid = plugins.LoadedPlugins.First().PluginGuid
                }
            });

            plugins.Tunnel(new Command() {
                Name = "SaveOneUser",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Potato itself.
                Origin = CommandOrigin.Local,
                Scope = {
                    PluginGuid = plugins.LoadedPlugins.First().PluginGuid
                }
            });

            var result = plugins.Tunnel(new Command() {
                Name = "FindOneUser",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Potato itself.
                Origin = CommandOrigin.Local,
                Scope = {
                    PluginGuid = plugins.LoadedPlugins.First().PluginGuid
                }
            });

            // Test the command was successful
            Assert.AreEqual(true, result.Success);
            Assert.AreEqual(CommandResultType.Success, result.CommandResultType);
            Assert.AreEqual("Phogue", result.Message);
        }
    }
}
