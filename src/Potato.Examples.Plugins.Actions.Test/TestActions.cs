#region Copyright
// Copyright 2014 Myrcon Pty. Ltd.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Potato.Core.Connections.Plugins;
using Potato.Core.Shared;
using Potato.Net.Shared;
using Potato.Net.Shared.Actions;

namespace Potato.Examples.Plugins.Actions.Test {
    [TestFixture]
    public class TestActions {
        /// <summary>
        /// Test for you to debug.
        /// Set a breakpoint within Potato.Examples.Actions.KickPlayer
        /// </summary>
        [Test]
        public void TestKickPlayerAction() {
            // Create a new plugin controller to load up the test plugin
            var plugins = new CorePluginController();

            // Now setup a mock handler to accept actions from the plugin
            var layer = new MockNetworkLayer();
            plugins.BubbleObjects.Add(layer);

            plugins.Execute();

            // Enable the single plugin that was loaded, otherwise it won't recieve any tunneled
            // commands.
            plugins.Tunnel(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.PluginsEnable,
                Scope = {
                    PluginGuid = plugins.LoadedPlugins.First().PluginGuid
                }
            });

            var result = plugins.Tunnel(new Command() {
                Name = "KickPlayer",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Potato itself.
                Origin = CommandOrigin.Local
            });

            Assert.AreEqual("KickPlayer.Result.packet: Client Request 100 [0-admin.kickPlayer] [1-Phogue]", result.Now.Content.First());
            Assert.AreEqual("KickPlayer.Result.packet: Client Request 101 [0-admin.say] [1-This is a reason to kick this person] [2-player] [3-Phogue]", result.Now.Content.Last());
        }

        /// <summary>
        /// Test for you to debug.
        /// Set a breakpoint within Potato.Examples.Actions.DeferredKickPlayer
        /// </summary>
        [Test]
        public void TestDeferredKickPlayerAction() {
            // Create a new plugin controller to load up the test plugin
            var plugins = new CorePluginController();

            // Now setup a mock handler to accept actions from the plugin
            var layer = new MockNetworkLayer();
            plugins.BubbleObjects.Add(layer);
            plugins.Execute();

            // Enable the single plugin that was loaded, otherwise it won't recieve any tunneled
            // commands.
            plugins.Tunnel(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.PluginsEnable,
                Scope = {
                    PluginGuid = plugins.LoadedPlugins.First().PluginGuid
                }
            });

            // Now finally poke the test plugin.
            var result = plugins.Tunnel(new Command() {
                Name = "DeferredKickPlayer",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Potato itself.
                Origin = CommandOrigin.Local
            });

            // Fake client events from the networking layer.
            layer.Waiting.Done += (action, requests, responses) => plugins.PluginFactory.ClientEvent(new List<IClientEventArgs>() {
                new ClientEventArgs() {
                    EventType = ClientEventType.ClientActionDone,
                    ConnectionState = ConnectionState.ConnectionLoggedIn,
                    Now = new ClientEventData() {
                        Packets = responses
                    },
                    Then = new ClientEventData() {
                        Actions = new List<INetworkAction>() {
                            action
                        },
                        Packets = requests
                    }
                }
            });

            // Now fire off the mock responses (you'll see the above anonymous method that fires
            // a ClientEvent called during this method)
            layer.MockResponses();

            Assert.AreEqual("KickPlayer.Result.packet: Client Request 100 [0-admin.kickPlayer] [1-Phogue]", result.Now.Content.First());
            Assert.AreEqual("KickPlayer.Result.packet: Client Request 101 [0-admin.say] [1-This is a reason to kick this person] [2-player] [3-Phogue]", result.Now.Content.Last());
        }
    }
}
